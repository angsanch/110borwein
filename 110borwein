#!/usr/bin/python3
##
## EPITECH PROJECT, 2023
## 110borwein
## File description:
## dont you hate integrals
##

import sys
import math

LIMIT = 5000
INTERVALS = 10_000
INTV_SIZE = (LIMIT / INTERVALS)

def print_usage():
    print("USAGE")
    print("\t./110borwein n")
    print("DESCRIPTION")
    print("\tn\tconstant defining the integral to be computed")

def calculate_function(x:float, k:float):
    if x == 0:
        return 1
    den = x / ((2 * k) + 1)
    return math.sin(den) / den

def borwein(x, n):
    result = 1

    for i in range(0, n + 1):
        result *= calculate_function(x, i)
    return (result)

def print_midpoint(n:float):
    result = 0
    for i in range(0, INTERVALS):
        result += borwein((i + 0.5) * INTV_SIZE, n) * INTV_SIZE
    print("Midpoint:")
    print(f"I{n} = {result:.10f}")
    print(f"diff = {abs(math.pi / 2 - result):.10f}")

def print_trapezoidal(n:float):
    points = []
    for i in range(0, INTERVALS + 1):
        x = i * INTV_SIZE
        points.append(borwein(x, n))
    result = 0
    for i in range(0, INTERVALS):
        result += points[i] * INTV_SIZE + \
            (((points[i + 1] - points[i]) * INTV_SIZE) / 2)
    print("Trapezoidal:")
    print(f"I{n} = {result:.10f}")
    print(f"diff = {abs(math.pi / 2 - result):.10f}")

def simpsons_rule_integral(y0, y1, y2):
    return (INTV_SIZE / 6) * (y0 + 4 * y1 + y2)

def print_simpson(n:float):
    points = []
    for i in range(0, (INTERVALS * 2) + 1):
        x = i * (INTV_SIZE / 2)
        points.append(borwein(x, n))
    result = 0
    for i in range(0, INTERVALS):
        result += simpsons_rule_integral(*points[i * 2:i * 2 + 3])
    print("Simpson:")
    print(f"I{n} = {result:.10f}")
    print(f"diff = {abs(math.pi / 2 - result):.10f}")

def stimate(n:float):
    print_midpoint(n)
    print()
    print_trapezoidal(n)
    print()
    print_simpson(n)

def main():
    if len(sys.argv) == 2:
        if sys.argv[1] == "-h":
            print_usage()
        elif int(sys.argv[1]) < 0:
            raise ValueError("Invalid constant")
        else:
            stimate(int(sys.argv[1]))
    else:
        raise Exception("Invalid amount of arguments.")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(e, file=sys.stderr)
        exit(84)
